# source: http://localhost:4466
# timestamp: Tue Jul 10 2018 23:03:37 GMT-0500 (Central Daylight Time)

type AggregateConfirmEmail {
  count: Int!
}

type AggregateResetPasswordEmail {
  count: Int!
}

type AggregateTimeLog {
  count: Int!
}

type AggregateTimeTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type ConfirmEmail {
  userId: ID!
  link: String!
}

"""A connection to a list of items."""
type ConfirmEmailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConfirmEmailEdge]!
  aggregate: AggregateConfirmEmail!
}

input ConfirmEmailCreateInput {
  userId: ID!
  link: String!
}

"""An edge in a connection."""
type ConfirmEmailEdge {
  """The item at the end of the edge."""
  node: ConfirmEmail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ConfirmEmailOrderByInput {
  userId_ASC
  userId_DESC
  link_ASC
  link_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ConfirmEmailPreviousValues {
  userId: ID!
  link: String!
}

type ConfirmEmailSubscriptionPayload {
  mutation: MutationType!
  node: ConfirmEmail
  updatedFields: [String!]
  previousValues: ConfirmEmailPreviousValues
}

input ConfirmEmailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ConfirmEmailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConfirmEmailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConfirmEmailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ConfirmEmailWhereInput
}

input ConfirmEmailUpdateInput {
  userId: ID
  link: String
}

input ConfirmEmailWhereInput {
  """Logical AND on all given filters."""
  AND: [ConfirmEmailWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConfirmEmailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConfirmEmailWhereInput!]
  userId: ID

  """All values that are not equal to given value."""
  userId_not: ID

  """All values that are contained in given list."""
  userId_in: [ID!]

  """All values that are not contained in given list."""
  userId_not_in: [ID!]

  """All values less than the given value."""
  userId_lt: ID

  """All values less than or equal the given value."""
  userId_lte: ID

  """All values greater than the given value."""
  userId_gt: ID

  """All values greater than or equal the given value."""
  userId_gte: ID

  """All values containing the given string."""
  userId_contains: ID

  """All values not containing the given string."""
  userId_not_contains: ID

  """All values starting with the given string."""
  userId_starts_with: ID

  """All values not starting with the given string."""
  userId_not_starts_with: ID

  """All values ending with the given string."""
  userId_ends_with: ID

  """All values not ending with the given string."""
  userId_not_ends_with: ID
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
}

input ConfirmEmailWhereUniqueInput {
  userId: ID
  link: String
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createConfirmEmail(data: ConfirmEmailCreateInput!): ConfirmEmail!
  createResetPasswordEmail(data: ResetPasswordEmailCreateInput!): ResetPasswordEmail!
  createTimeTag(data: TimeTagCreateInput!): TimeTag!
  createTimeLog(data: TimeLogCreateInput!): TimeLog!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateConfirmEmail(data: ConfirmEmailUpdateInput!, where: ConfirmEmailWhereUniqueInput!): ConfirmEmail
  updateResetPasswordEmail(data: ResetPasswordEmailUpdateInput!, where: ResetPasswordEmailWhereUniqueInput!): ResetPasswordEmail
  updateTimeTag(data: TimeTagUpdateInput!, where: TimeTagWhereUniqueInput!): TimeTag
  updateTimeLog(data: TimeLogUpdateInput!, where: TimeLogWhereUniqueInput!): TimeLog
  deleteUser(where: UserWhereUniqueInput!): User
  deleteConfirmEmail(where: ConfirmEmailWhereUniqueInput!): ConfirmEmail
  deleteResetPasswordEmail(where: ResetPasswordEmailWhereUniqueInput!): ResetPasswordEmail
  deleteTimeTag(where: TimeTagWhereUniqueInput!): TimeTag
  deleteTimeLog(where: TimeLogWhereUniqueInput!): TimeLog
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertConfirmEmail(where: ConfirmEmailWhereUniqueInput!, create: ConfirmEmailCreateInput!, update: ConfirmEmailUpdateInput!): ConfirmEmail!
  upsertResetPasswordEmail(where: ResetPasswordEmailWhereUniqueInput!, create: ResetPasswordEmailCreateInput!, update: ResetPasswordEmailUpdateInput!): ResetPasswordEmail!
  upsertTimeTag(where: TimeTagWhereUniqueInput!, create: TimeTagCreateInput!, update: TimeTagUpdateInput!): TimeTag!
  upsertTimeLog(where: TimeLogWhereUniqueInput!, create: TimeLogCreateInput!, update: TimeLogUpdateInput!): TimeLog!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyConfirmEmails(data: ConfirmEmailUpdateInput!, where: ConfirmEmailWhereInput): BatchPayload!
  updateManyResetPasswordEmails(data: ResetPasswordEmailUpdateInput!, where: ResetPasswordEmailWhereInput): BatchPayload!
  updateManyTimeTags(data: TimeTagUpdateInput!, where: TimeTagWhereInput): BatchPayload!
  updateManyTimeLogs(data: TimeLogUpdateInput!, where: TimeLogWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyConfirmEmails(where: ConfirmEmailWhereInput): BatchPayload!
  deleteManyResetPasswordEmails(where: ResetPasswordEmailWhereInput): BatchPayload!
  deleteManyTimeTags(where: TimeTagWhereInput): BatchPayload!
  deleteManyTimeLogs(where: TimeLogWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  confirmEmails(where: ConfirmEmailWhereInput, orderBy: ConfirmEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConfirmEmail]!
  resetPasswordEmails(where: ResetPasswordEmailWhereInput, orderBy: ResetPasswordEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResetPasswordEmail]!
  timeTags(where: TimeTagWhereInput, orderBy: TimeTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeTag]!
  timeLogs(where: TimeLogWhereInput, orderBy: TimeLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeLog]!
  user(where: UserWhereUniqueInput!): User
  confirmEmail(where: ConfirmEmailWhereUniqueInput!): ConfirmEmail
  resetPasswordEmail(where: ResetPasswordEmailWhereUniqueInput!): ResetPasswordEmail
  timeTag(where: TimeTagWhereUniqueInput!): TimeTag
  timeLog(where: TimeLogWhereUniqueInput!): TimeLog
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  confirmEmailsConnection(where: ConfirmEmailWhereInput, orderBy: ConfirmEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConfirmEmailConnection!
  resetPasswordEmailsConnection(where: ResetPasswordEmailWhereInput, orderBy: ResetPasswordEmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResetPasswordEmailConnection!
  timeTagsConnection(where: TimeTagWhereInput, orderBy: TimeTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeTagConnection!
  timeLogsConnection(where: TimeLogWhereInput, orderBy: TimeLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeLogConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type ResetPasswordEmail {
  userId: ID!
  link: String!
}

"""A connection to a list of items."""
type ResetPasswordEmailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResetPasswordEmailEdge]!
  aggregate: AggregateResetPasswordEmail!
}

input ResetPasswordEmailCreateInput {
  userId: ID!
  link: String!
}

"""An edge in a connection."""
type ResetPasswordEmailEdge {
  """The item at the end of the edge."""
  node: ResetPasswordEmail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ResetPasswordEmailOrderByInput {
  userId_ASC
  userId_DESC
  link_ASC
  link_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ResetPasswordEmailPreviousValues {
  userId: ID!
  link: String!
}

type ResetPasswordEmailSubscriptionPayload {
  mutation: MutationType!
  node: ResetPasswordEmail
  updatedFields: [String!]
  previousValues: ResetPasswordEmailPreviousValues
}

input ResetPasswordEmailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResetPasswordEmailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResetPasswordEmailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResetPasswordEmailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResetPasswordEmailWhereInput
}

input ResetPasswordEmailUpdateInput {
  userId: ID
  link: String
}

input ResetPasswordEmailWhereInput {
  """Logical AND on all given filters."""
  AND: [ResetPasswordEmailWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResetPasswordEmailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResetPasswordEmailWhereInput!]
  userId: ID

  """All values that are not equal to given value."""
  userId_not: ID

  """All values that are contained in given list."""
  userId_in: [ID!]

  """All values that are not contained in given list."""
  userId_not_in: [ID!]

  """All values less than the given value."""
  userId_lt: ID

  """All values less than or equal the given value."""
  userId_lte: ID

  """All values greater than the given value."""
  userId_gt: ID

  """All values greater than or equal the given value."""
  userId_gte: ID

  """All values containing the given string."""
  userId_contains: ID

  """All values not containing the given string."""
  userId_not_contains: ID

  """All values starting with the given string."""
  userId_starts_with: ID

  """All values not starting with the given string."""
  userId_not_starts_with: ID

  """All values ending with the given string."""
  userId_ends_with: ID

  """All values not ending with the given string."""
  userId_not_ends_with: ID
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
}

input ResetPasswordEmailWhereUniqueInput {
  userId: ID
  link: String
}

enum ROLE_TAG {
  ADMIN
  CUSTOMER
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  confirmEmail(where: ConfirmEmailSubscriptionWhereInput): ConfirmEmailSubscriptionPayload
  resetPasswordEmail(where: ResetPasswordEmailSubscriptionWhereInput): ResetPasswordEmailSubscriptionPayload
  timeTag(where: TimeTagSubscriptionWhereInput): TimeTagSubscriptionPayload
  timeLog(where: TimeLogSubscriptionWhereInput): TimeLogSubscriptionPayload
}

type TimeLog implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  text: String
  date: DateTime
  isRange: Boolean
  startTime: DateTime
  endTime: DateTime
  totalTime: Int
  deleted: Boolean
  user(where: UserWhereInput): User!
  tags(where: TimeTagWhereInput, orderBy: TimeTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeTag!]
}

"""A connection to a list of items."""
type TimeLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeLogEdge]!
  aggregate: AggregateTimeLog!
}

input TimeLogCreateInput {
  title: String!
  text: String
  date: DateTime
  isRange: Boolean
  startTime: DateTime
  endTime: DateTime
  totalTime: Int
  deleted: Boolean
  user: UserCreateOneWithoutTimeLogsInput!
  tags: TimeTagCreateManyWithoutTimeLogsInput
}

input TimeLogCreateManyWithoutTagsInput {
  create: [TimeLogCreateWithoutTagsInput!]
  connect: [TimeLogWhereUniqueInput!]
}

input TimeLogCreateManyWithoutUserInput {
  create: [TimeLogCreateWithoutUserInput!]
  connect: [TimeLogWhereUniqueInput!]
}

input TimeLogCreateWithoutTagsInput {
  title: String!
  text: String
  date: DateTime
  isRange: Boolean
  startTime: DateTime
  endTime: DateTime
  totalTime: Int
  deleted: Boolean
  user: UserCreateOneWithoutTimeLogsInput!
}

input TimeLogCreateWithoutUserInput {
  title: String!
  text: String
  date: DateTime
  isRange: Boolean
  startTime: DateTime
  endTime: DateTime
  totalTime: Int
  deleted: Boolean
  tags: TimeTagCreateManyWithoutTimeLogsInput
}

"""An edge in a connection."""
type TimeLogEdge {
  """The item at the end of the edge."""
  node: TimeLog!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TimeLogOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  date_ASC
  date_DESC
  isRange_ASC
  isRange_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  totalTime_ASC
  totalTime_DESC
  deleted_ASC
  deleted_DESC
}

type TimeLogPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  text: String
  date: DateTime
  isRange: Boolean
  startTime: DateTime
  endTime: DateTime
  totalTime: Int
  deleted: Boolean
}

type TimeLogSubscriptionPayload {
  mutation: MutationType!
  node: TimeLog
  updatedFields: [String!]
  previousValues: TimeLogPreviousValues
}

input TimeLogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeLogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeLogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeLogSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TimeLogWhereInput
}

input TimeLogUpdateInput {
  title: String
  text: String
  date: DateTime
  isRange: Boolean
  startTime: DateTime
  endTime: DateTime
  totalTime: Int
  deleted: Boolean
  user: UserUpdateOneWithoutTimeLogsInput
  tags: TimeTagUpdateManyWithoutTimeLogsInput
}

input TimeLogUpdateManyWithoutTagsInput {
  create: [TimeLogCreateWithoutTagsInput!]
  connect: [TimeLogWhereUniqueInput!]
  disconnect: [TimeLogWhereUniqueInput!]
  delete: [TimeLogWhereUniqueInput!]
  update: [TimeLogUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [TimeLogUpsertWithWhereUniqueWithoutTagsInput!]
}

input TimeLogUpdateManyWithoutUserInput {
  create: [TimeLogCreateWithoutUserInput!]
  connect: [TimeLogWhereUniqueInput!]
  disconnect: [TimeLogWhereUniqueInput!]
  delete: [TimeLogWhereUniqueInput!]
  update: [TimeLogUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TimeLogUpsertWithWhereUniqueWithoutUserInput!]
}

input TimeLogUpdateWithoutTagsDataInput {
  title: String
  text: String
  date: DateTime
  isRange: Boolean
  startTime: DateTime
  endTime: DateTime
  totalTime: Int
  deleted: Boolean
  user: UserUpdateOneWithoutTimeLogsInput
}

input TimeLogUpdateWithoutUserDataInput {
  title: String
  text: String
  date: DateTime
  isRange: Boolean
  startTime: DateTime
  endTime: DateTime
  totalTime: Int
  deleted: Boolean
  tags: TimeTagUpdateManyWithoutTimeLogsInput
}

input TimeLogUpdateWithWhereUniqueWithoutTagsInput {
  where: TimeLogWhereUniqueInput!
  data: TimeLogUpdateWithoutTagsDataInput!
}

input TimeLogUpdateWithWhereUniqueWithoutUserInput {
  where: TimeLogWhereUniqueInput!
  data: TimeLogUpdateWithoutUserDataInput!
}

input TimeLogUpsertWithWhereUniqueWithoutTagsInput {
  where: TimeLogWhereUniqueInput!
  update: TimeLogUpdateWithoutTagsDataInput!
  create: TimeLogCreateWithoutTagsInput!
}

input TimeLogUpsertWithWhereUniqueWithoutUserInput {
  where: TimeLogWhereUniqueInput!
  update: TimeLogUpdateWithoutUserDataInput!
  create: TimeLogCreateWithoutUserInput!
}

input TimeLogWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeLogWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeLogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeLogWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  isRange: Boolean

  """All values that are not equal to given value."""
  isRange_not: Boolean
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  endTime: DateTime

  """All values that are not equal to given value."""
  endTime_not: DateTime

  """All values that are contained in given list."""
  endTime_in: [DateTime!]

  """All values that are not contained in given list."""
  endTime_not_in: [DateTime!]

  """All values less than the given value."""
  endTime_lt: DateTime

  """All values less than or equal the given value."""
  endTime_lte: DateTime

  """All values greater than the given value."""
  endTime_gt: DateTime

  """All values greater than or equal the given value."""
  endTime_gte: DateTime
  totalTime: Int

  """All values that are not equal to given value."""
  totalTime_not: Int

  """All values that are contained in given list."""
  totalTime_in: [Int!]

  """All values that are not contained in given list."""
  totalTime_not_in: [Int!]

  """All values less than the given value."""
  totalTime_lt: Int

  """All values less than or equal the given value."""
  totalTime_lte: Int

  """All values greater than the given value."""
  totalTime_gt: Int

  """All values greater than or equal the given value."""
  totalTime_gte: Int
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  user: UserWhereInput
  tags_every: TimeTagWhereInput
  tags_some: TimeTagWhereInput
  tags_none: TimeTagWhereInput
}

input TimeLogWhereUniqueInput {
  id: ID
}

type TimeTag implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  color: String!
  deleted: Boolean
  user(where: UserWhereInput): User
  isGeneral: Boolean
  timeLogs(where: TimeLogWhereInput, orderBy: TimeLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeLog!]
}

"""A connection to a list of items."""
type TimeTagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeTagEdge]!
  aggregate: AggregateTimeTag!
}

input TimeTagCreateInput {
  name: String!
  description: String
  color: String!
  deleted: Boolean
  isGeneral: Boolean
  user: UserCreateOneWithoutTimeTagsInput
  timeLogs: TimeLogCreateManyWithoutTagsInput
}

input TimeTagCreateManyWithoutTimeLogsInput {
  create: [TimeTagCreateWithoutTimeLogsInput!]
  connect: [TimeTagWhereUniqueInput!]
}

input TimeTagCreateManyWithoutUserInput {
  create: [TimeTagCreateWithoutUserInput!]
  connect: [TimeTagWhereUniqueInput!]
}

input TimeTagCreateWithoutTimeLogsInput {
  name: String!
  description: String
  color: String!
  deleted: Boolean
  isGeneral: Boolean
  user: UserCreateOneWithoutTimeTagsInput
}

input TimeTagCreateWithoutUserInput {
  name: String!
  description: String
  color: String!
  deleted: Boolean
  isGeneral: Boolean
  timeLogs: TimeLogCreateManyWithoutTagsInput
}

"""An edge in a connection."""
type TimeTagEdge {
  """The item at the end of the edge."""
  node: TimeTag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TimeTagOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  color_ASC
  color_DESC
  deleted_ASC
  deleted_DESC
  isGeneral_ASC
  isGeneral_DESC
}

type TimeTagPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  color: String!
  deleted: Boolean
  isGeneral: Boolean
}

type TimeTagSubscriptionPayload {
  mutation: MutationType!
  node: TimeTag
  updatedFields: [String!]
  previousValues: TimeTagPreviousValues
}

input TimeTagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeTagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeTagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeTagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TimeTagWhereInput
}

input TimeTagUpdateInput {
  name: String
  description: String
  color: String
  deleted: Boolean
  isGeneral: Boolean
  user: UserUpdateOneWithoutTimeTagsInput
  timeLogs: TimeLogUpdateManyWithoutTagsInput
}

input TimeTagUpdateManyWithoutTimeLogsInput {
  create: [TimeTagCreateWithoutTimeLogsInput!]
  connect: [TimeTagWhereUniqueInput!]
  disconnect: [TimeTagWhereUniqueInput!]
  delete: [TimeTagWhereUniqueInput!]
  update: [TimeTagUpdateWithWhereUniqueWithoutTimeLogsInput!]
  upsert: [TimeTagUpsertWithWhereUniqueWithoutTimeLogsInput!]
}

input TimeTagUpdateManyWithoutUserInput {
  create: [TimeTagCreateWithoutUserInput!]
  connect: [TimeTagWhereUniqueInput!]
  disconnect: [TimeTagWhereUniqueInput!]
  delete: [TimeTagWhereUniqueInput!]
  update: [TimeTagUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TimeTagUpsertWithWhereUniqueWithoutUserInput!]
}

input TimeTagUpdateWithoutTimeLogsDataInput {
  name: String
  description: String
  color: String
  deleted: Boolean
  isGeneral: Boolean
  user: UserUpdateOneWithoutTimeTagsInput
}

input TimeTagUpdateWithoutUserDataInput {
  name: String
  description: String
  color: String
  deleted: Boolean
  isGeneral: Boolean
  timeLogs: TimeLogUpdateManyWithoutTagsInput
}

input TimeTagUpdateWithWhereUniqueWithoutTimeLogsInput {
  where: TimeTagWhereUniqueInput!
  data: TimeTagUpdateWithoutTimeLogsDataInput!
}

input TimeTagUpdateWithWhereUniqueWithoutUserInput {
  where: TimeTagWhereUniqueInput!
  data: TimeTagUpdateWithoutUserDataInput!
}

input TimeTagUpsertWithWhereUniqueWithoutTimeLogsInput {
  where: TimeTagWhereUniqueInput!
  update: TimeTagUpdateWithoutTimeLogsDataInput!
  create: TimeTagCreateWithoutTimeLogsInput!
}

input TimeTagUpsertWithWhereUniqueWithoutUserInput {
  where: TimeTagWhereUniqueInput!
  update: TimeTagUpdateWithoutUserDataInput!
  create: TimeTagCreateWithoutUserInput!
}

input TimeTagWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeTagWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeTagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeTagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  isGeneral: Boolean

  """All values that are not equal to given value."""
  isGeneral_not: Boolean
  user: UserWhereInput
  timeLogs_every: TimeLogWhereInput
  timeLogs_some: TimeLogWhereInput
  timeLogs_none: TimeLogWhereInput
}

input TimeTagWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  name: String!
  timeLogs(where: TimeLogWhereInput, orderBy: TimeLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeLog!]
  timeTags(where: TimeTagWhereInput, orderBy: TimeTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeTag!]
  role: ROLE_TAG!
  confirmedEmail: Boolean!
  resetPasswordEmail: Boolean!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  role: ROLE_TAG
  confirmedEmail: Boolean
  resetPasswordEmail: Boolean
  timeLogs: TimeLogCreateManyWithoutUserInput
  timeTags: TimeTagCreateManyWithoutUserInput
}

input UserCreateOneWithoutTimeLogsInput {
  create: UserCreateWithoutTimeLogsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTimeTagsInput {
  create: UserCreateWithoutTimeTagsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTimeLogsInput {
  email: String!
  password: String!
  name: String!
  role: ROLE_TAG
  confirmedEmail: Boolean
  resetPasswordEmail: Boolean
  timeTags: TimeTagCreateManyWithoutUserInput
}

input UserCreateWithoutTimeTagsInput {
  email: String!
  password: String!
  name: String!
  role: ROLE_TAG
  confirmedEmail: Boolean
  resetPasswordEmail: Boolean
  timeLogs: TimeLogCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  role_ASC
  role_DESC
  confirmedEmail_ASC
  confirmedEmail_DESC
  resetPasswordEmail_ASC
  resetPasswordEmail_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  name: String!
  role: ROLE_TAG!
  confirmedEmail: Boolean!
  resetPasswordEmail: Boolean!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  role: ROLE_TAG
  confirmedEmail: Boolean
  resetPasswordEmail: Boolean
  timeLogs: TimeLogUpdateManyWithoutUserInput
  timeTags: TimeTagUpdateManyWithoutUserInput
}

input UserUpdateOneWithoutTimeLogsInput {
  create: UserCreateWithoutTimeLogsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutTimeLogsDataInput
  upsert: UserUpsertWithoutTimeLogsInput
}

input UserUpdateOneWithoutTimeTagsInput {
  create: UserCreateWithoutTimeTagsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutTimeTagsDataInput
  upsert: UserUpsertWithoutTimeTagsInput
}

input UserUpdateWithoutTimeLogsDataInput {
  email: String
  password: String
  name: String
  role: ROLE_TAG
  confirmedEmail: Boolean
  resetPasswordEmail: Boolean
  timeTags: TimeTagUpdateManyWithoutUserInput
}

input UserUpdateWithoutTimeTagsDataInput {
  email: String
  password: String
  name: String
  role: ROLE_TAG
  confirmedEmail: Boolean
  resetPasswordEmail: Boolean
  timeLogs: TimeLogUpdateManyWithoutUserInput
}

input UserUpsertWithoutTimeLogsInput {
  update: UserUpdateWithoutTimeLogsDataInput!
  create: UserCreateWithoutTimeLogsInput!
}

input UserUpsertWithoutTimeTagsInput {
  update: UserUpdateWithoutTimeTagsDataInput!
  create: UserCreateWithoutTimeTagsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  role: ROLE_TAG

  """All values that are not equal to given value."""
  role_not: ROLE_TAG

  """All values that are contained in given list."""
  role_in: [ROLE_TAG!]

  """All values that are not contained in given list."""
  role_not_in: [ROLE_TAG!]
  confirmedEmail: Boolean

  """All values that are not equal to given value."""
  confirmedEmail_not: Boolean
  resetPasswordEmail: Boolean

  """All values that are not equal to given value."""
  resetPasswordEmail_not: Boolean
  timeLogs_every: TimeLogWhereInput
  timeLogs_some: TimeLogWhereInput
  timeLogs_none: TimeLogWhereInput
  timeTags_every: TimeTagWhereInput
  timeTags_some: TimeTagWhereInput
  timeTags_none: TimeTagWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
